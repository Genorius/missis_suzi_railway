from aiogram import Bot, Dispatcher, F, Router, types, html
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
import os

from utils import get_order_by_bot_code_or_phone, get_status_text, get_track_text, get_orders, save_review_to_crm
from auth_db import save_user_auth, get_order_id_by_user_id
from keyboards import get_main_keyboard, get_orders_keyboard, get_stars_keyboard

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
PORT = int(os.environ.get("PORT", 8080))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

class AuthState(StatesGroup):
    waiting_for_code = State()
    waiting_for_review = State()

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Missis S‚ÄôUzi. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì¶")
    await state.set_state(AuthState.waiting_for_code)

@router.message(AuthState.waiting_for_code)
async def process_auth(message: Message, state: FSMContext):
    user_input = message.text.strip()
    order = get_order_by_bot_code_or_phone(user_input)
    if order:
        save_user_auth(message.from_user.id, order["id"])
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–æ–º:", reply_markup=get_main_keyboard())
        await state.clear()
    else:
        count = int((await state.get_data()).get("fail_count", 0)) + 1
        await state.update_data(fail_count=count)
        if count >= 3:
            await message.answer("–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ üòî –ù–∞–≤–µ—Ä–Ω—è–∫–∞ –µ—Å—Ç—å –≤–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —ç—Ç–∏–º —Ä–∞–∑–±–µ—Ä—É—Å—å!\n\n–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî –∏ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É –∏—Å–∫–∞—Ç—å —Å–ø–æ—Å–æ–± –í–∞–º –ø–æ–º–æ—á—å ü§ç")
            await notify_admin_about_failed_auth(message)
        else:
            await message.answer("‚ùå –£–≤—ã, —è –Ω–µ –Ω–∞—à–ª–∞ –∑–∞–∫–∞–∑ –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚Äî —è —Ä—è–¥–æ–º ‚ù§Ô∏è")

async def notify_admin_about_failed_auth(message: Message):
    text = f"‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:\n<code>{html.quote(message.text)}</code>\nTelegram: @{message.from_user.username or '–Ω–µ—Ç'} / {message.from_user.id}"
    await bot.send_message(chat_id=ADMIN_USERNAME, text=text)

@router.callback_query(F.data == "status")
async def status_handler(callback: types.CallbackQuery):
    order_id = get_order_id_by_user_id(callback.from_user.id)
    text = get_status_text(order_id) if order_id else "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "track")
async def track_handler(callback: types.CallbackQuery):
    order_id = get_order_id_by_user_id(callback.from_user.id)
    text = get_track_text(order_id) if order_id else "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "orders")
async def orders_handler(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=get_orders_keyboard())
    await callback.answer()

@router.callback_query(F.data.in_(["orders_active", "orders_past"]))
async def show_orders(callback: types.CallbackQuery):
    active = callback.data == "orders_active"
    await callback.message.answer(get_orders(active=active))
    await callback.answer()

@router.callback_query(F.data == "rate")
async def rate_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –ø—Ä–æ—à—ë–ª –≤–∞—à –∑–∞–∫–∞–∑ ‚≠êÔ∏è", reply_markup=get_stars_keyboard())
    await state.set_state(AuthState.waiting_for_review)
    await callback.answer()

@router.callback_query(F.data.startswith("‚≠ê"))
async def handle_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = callback.data
    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating} ‚≠êÔ∏è –ê —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤? –ú–Ω–µ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ —ç—Ç–æ —É—Å–ª—ã—à–∞—Ç—å ü´∂ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ üí¨")
    await callback.answer()

@router.message(AuthState.waiting_for_review)
async def save_review(message: Message, state: FSMContext):
    order_id = get_order_id_by_user_id(message.from_user.id)
    if order_id:
        save_review_to_crm(order_id, message.text)
        await message.answer("üíå –°–ø–∞—Å–∏–±–æ! –Ø –≤—Å—ë –ø—Ä–æ—á–∏—Ç–∞–ª–∞ –∏ —É—á—Ç—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ü§ç")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

@router.callback_query(F.data == "support")
async def support_handler(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –≤—Å—ë –Ω–∞—à–µ–º—É –∑–∞–±–æ—Ç–ª–∏–≤–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ü§ç")
    await bot.send_message(chat_id=ADMIN_USERNAME, text="üì¨ –ö–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n" + callback.message.text)
    await callback.answer()

# Webhook –∏ —Å–µ—Ä–≤–µ—Ä
async def webhook_handler(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

async def ping(request):
    return web.Response(text="pong")

async def on_startup(app):
    webhook_url = os.getenv("WEBHOOK_URL")
    await bot.set_webhook(webhook_url)
    print("üöÄ on_startup –≤—ã–∑–≤–∞–Ω")
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

app = web.Application()
app.router.add_post("/webhook", webhook_handler)
app.router.add_get("/ping", ping)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    print("‚úÖ Bot is starting manually on aiohttp...")
    web.run_app(app, host="0.0.0.0", port=PORT)