import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN, ADMIN_TELEGRAM_ID
from crm import get_order_by_bot_code, get_orders_by_phone, get_order_status, get_tracking_number, save_feedback
from redis_client import is_authorized, save_authorization
import re

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MSG = """üëã –ü—Ä–∏–≤–µ—Ç!
–Ø ‚Äî –±–æ—Ç Missis S‚ÄôUzi.
–ü–æ–º–æ–≥–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì¶"""

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "üî¢ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä")
    kb.add("üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    return kb

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(WELCOME_MSG)

@dp.message_handler(lambda msg: msg.text.startswith("üí¨"))
async def support_handler(message: types.Message):
    await bot.send_message(ADMIN_TELEGRAM_ID, f"""–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
{message.text}""")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ! –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º ü§ç")

@dp.message_handler(lambda message: True)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if not is_authorized(user_id):
        if re.match(r"^\+?\d{10,15}$", text):
            orders = get_orders_by_phone(text)
            if orders:
                save_authorization(user_id)
                await message.answer("–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è", reply_markup=main_keyboard())
            else:
                await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        else:
            order = get_order_by_bot_code(text)
            if order:
                save_authorization(user_id)
                await message.answer("–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü§ç", reply_markup=main_keyboard())
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –£—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if text == "üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
        status = get_order_status(user_id)
        await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}")
    elif text == "üî¢ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä":
        track = get_tracking_number(user_id)
        if track:
            await message.answer(f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track}\n[–û—Ç—Å–ª–µ–¥–∏—Ç—å](https://www.cdek.ru/ru/tracking)", parse_mode="Markdown")
        else:
            await message.answer("–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è ‚Äî —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏–º!")
    elif text == "üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        orders = get_orders_by_phone("dummy")  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
        if not orders:
            await message.answer("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ ü§ç")
        else:
            msg = "\n".join([f"‚Ä¢ {o['number']} ‚Äî {o['status']}" for o in orders])
            await message.answer(f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n{msg}")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º üí¨")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
