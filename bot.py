
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from redis_client import is_authorized, authorize_user
from crm import get_order_by_bot_code, get_orders_by_phone, get_order_status, get_tracking_number

import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")

WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–Ω–æ–ø–∫–∏
menu_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è")],
    [KeyboardButton(text="üìÆ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä")],
    [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
    [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
], resize_keyboard=True)

@dp.message(lambda message: message.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(
    "üëã –ü—Ä–∏–≤–µ—Ç!\n"
    "–Ø ‚Äî –±–æ—Ç Missis S‚ÄôUzi.\n"
    "–ü–æ–º–æ–≥–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.\n\n"
    "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì¶"
)

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_input = message.text.strip()

    if not is_authorized(user_id):
        if authorize_user(user_id, user_input):
            await message.answer("–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü§ç", reply_markup=menu_keyboard)
        else:
            await message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º üì®")
        return

    if user_input == "üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
        status = get_order_status(user_id)
        await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status if status else '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'} üì¶")

    elif user_input == "üìÆ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä":
        track = get_tracking_number(user_id)
        if track:
            await message.answer(f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track}")
        else:
            await message.answer("–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è ‚Äî —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏–º!")

    elif user_input == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        orders = get_orders_by_phone(user_id)
        if not orders:
            await message.answer("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:
" + "\n".join([f"‚Ä¢ {o['number']} ‚Äî {o['status']}" for o in orders])
            await message.answer(text)

    elif user_input == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        support_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ #{user_id}: {message.text}"
        await bot.send_message(ADMIN_TELEGRAM_ID, support_message)
        await message.answer("–ú—ã —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º üí¨")

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.debug(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    dp.startup.register(on_startup)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    web.run_app(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    main()
