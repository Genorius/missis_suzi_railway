import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from crm import (
    pick_order_by_code_or_phone,
    get_order_status_text,
    get_tracking_number_text,
    get_orders_list_text,
    save_review
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# FSM
class AuthStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_review = State()

# –ö–Ω–æ–ø–∫–∏
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="status")],
        [InlineKeyboardButton(text="üéØ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä", callback_data="track")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

# /start
@dp.message(commands=["start"])
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Missis S‚ÄôUzi ‚Äî –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à bot_code –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ü§ç"
    )
    await state.set_state(AuthStates.waiting_for_code)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@dp.message(AuthStates.waiting_for_code)
async def process_auth(message: types.Message, state: FSMContext):
    code_or_phone = message.text.strip()
    order = pick_order_by_code_or_phone(code_or_phone, telegram_id=message.from_user.id)

    if order:
        await state.clear()
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –°—Ç–∞—Ç—É—Å
@dp.callback_query(lambda c: c.data == "status")
async def order_status_handler(callback: types.CallbackQuery):
    status_text = get_order_status_text(callback.from_user.id)
    await callback.message.answer(status_text)

# –¢—Ä–µ–∫
@dp.callback_query(lambda c: c.data == "track")
async def tracking_handler(callback: types.CallbackQuery):
    track_text = get_tracking_number_text(callback.from_user.id)
    await callback.message.answer(track_text)

# –ó–∞–∫–∞–∑—ã
@dp.callback_query(lambda c: c.data == "orders")
async def orders_handler(callback: types.CallbackQuery):
    orders_text = get_orders_list_text(callback.from_user.id)
    await callback.message.answer(orders_text)

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query(lambda c: c.data == "support")
async def support_handler(callback: types.CallbackQuery):
    await callback.message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ ü§ç")
    await bot.send_message(ADMIN_ID, f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{callback.from_user.username} (ID {callback.from_user.id})")

# –û—Ç–∑—ã–≤
@dp.message(AuthStates.waiting_for_review)
async def review_handler(message: types.Message, state: FSMContext):
    save_review(message.from_user.id, message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ üí¨üòä")
    await state.clear()

# Webhook –∑–∞–ø—É—Å–∫
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
