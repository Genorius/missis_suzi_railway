import logging
from typing import List, Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook

from config import TELEGRAM_BOT_TOKEN, WEBHOOK_URL, PORT, USE_WEBHOOK, ADMIN_CHAT_ID
from utils import normalize_phone, human_status
from crm import fetch_orders_by_bot_code, fetch_orders_by_phone, get_order_by_id, patch_order_comment

# logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("missis_suzi_bot")

# In-memory auth (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)
AUTH: Dict[int, Dict[str, str]] = {}

# Safety check for token
if not TELEGRAM_BOT_TOKEN or ":" not in TELEGRAM_BOT_TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN –ø—É—Å—Ç–æ–π/–Ω–µ–≤–µ—Ä–Ω—ã–π. –ó–∞–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

class AuthStates(StatesGroup):
    waiting_input = State()

class SupportStates(StatesGroup):
    waiting_message = State()

class ReviewStates(StatesGroup):
    waiting_stars = State()
    waiting_comment = State()

WEBHOOK_PATH = "/telegram"  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞

def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="auth_start")
    ]])

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="status")],
        [InlineKeyboardButton(text="–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä", callback_data="track")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ])

def kb_stars() -> InlineKeyboardMarkup:
    row = [
        InlineKeyboardButton(text="‚òÖ", callback_data="star:1"),
        InlineKeyboardButton(text="‚òÖ‚òÖ", callback_data="star:2"),
        InlineKeyboardButton(text="‚òÖ‚òÖ‚òÖ", callback_data="star:3"),
        InlineKeyboardButton(text="‚òÖ‚òÖ‚òÖ‚òÖ", callback_data="star:4"),
        InlineKeyboardButton(text="‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ", callback_data="star:5"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[row])

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Missis S‚ÄôUzi ‚Äî —è –ø–æ–º–æ–≥—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç—Ä–µ–∫‚Äë–Ω–æ–º–µ—Ä–æ–º –∏ –∑–∞–∫–∞–∑–∞–º–∏.\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º ‚Äî –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
        reply_markup=kb_start()
    )

@dp.callback_query_handler(lambda c: c.data == "auth_start")
async def cb_auth_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>bot_code</b> –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await AuthStates.waiting_input.set()
    await callback.answer()

@dp.message_handler(state=AuthStates.waiting_input)
async def cb_auth_input(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    orders: List[Dict[str, Any]] = []

    phone = normalize_phone(text)
    if phone:
        orders = await fetch_orders_by_phone(phone)
    else:
        orders = await fetch_orders_by_bot_code(text)

    if not orders:
        await message.answer("–ù–µ –Ω–∞—à–ª–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    order = orders[0]
    order_id = str(order.get("id") or order.get("externalId") or order.get("number"))

    AUTH[message.from_user.id] = {"order_id": order_id, "phone": phone or "", "code": "" if phone else text}

    await state.finish()
    await message.answer("–ì–æ—Ç–æ–≤–æ! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚úÖ", reply_markup=kb_main())

def _need_auth(user_id: int) -> bool:
    return user_id not in AUTH

@dp.callback_query_handler(lambda c: c.data == "status")
async def cb_status(callback: types.CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if _need_auth(uid):
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.", reply_markup=kb_start())
        return await callback.answer()

    order_id = AUTH[uid]["order_id"]
    order = await get_order_by_id(order_id)
    if not order:
        await callback.message.answer("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ ü§ç")
        return await callback.answer()

    status = human_status(order.get("status") or "unknown")
    num = order.get("number") or order.get("externalId") or order.get("id")
    await callback.message.answer(f"üì¶ –ó–∞–∫–∞–∑ #{num}\n–°—Ç–∞—Ç—É—Å: <b>{status}</b>")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "track")
async def cb_track(callback: types.CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if _need_auth(uid):
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.", reply_markup=kb_start())
        return await callback.answer()

    order_id = AUTH[uid]["order_id"]
    order = await get_order_by_id(order_id)
    if not order:
        await callback.message.answer("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ ü§ç")
        return await callback.answer()

    delivery = order.get("delivery") or {}
    track = (delivery.get("number") or "").strip()
    if track:
        await callback.message.answer(f"üîé –¢—Ä–µ–∫‚Äë–Ω–æ–º–µ—Ä: <code>{track}</code>")
    else:
        await callback.message.answer("–ü–æ–∫–∞ –±–µ–∑ —Ç—Ä–µ–∫‚Äë–Ω–æ–º–µ—Ä–∞ ‚Äî –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è, —è —Å—Ä–∞–∑—É –ø–æ–¥—Å–∫–∞–∂—É. ü§ç")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "orders")
async def cb_orders(callback: types.CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if _need_auth(uid):
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.", reply_markup=kb_start())
        return await callback.answer()

    phone = AUTH[uid].get("phone") or ""
    code = AUTH[uid].get("code") or ""
    orders = []
    if phone:
        orders = await fetch_orders_by_phone(phone)
    if not orders and code:
        orders = await fetch_orders_by_bot_code(code)

    if not orders:
        await callback.message.answer("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ ü§ç")
        return await callback.answer()

    text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    for o in orders[:10]:
        num = o.get("number") or o.get("externalId") or o.get("id")
        status = o.get("status") or "unknown"
        text += f"‚Ä¢ #{num} ‚Äî {status}\n"
    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "support")
async def cb_support(callback: types.CallbackQuery, state: FSMContext):
    if _need_auth(callback.from_user.id):
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.", reply_markup=kb_start())
        return await callback.answer()
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å. –Ø –ø–µ—Ä–µ–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await SupportStates.waiting_message.set()
    await callback.answer()

@dp.message_handler(state=SupportStates.waiting_message, content_types=types.ContentTypes.ANY)
async def support_relay(message: types.Message, state: FSMContext):
    if ADMIN_CHAT_ID:
        user = message.from_user
        try:
            header = f"–ó–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{user.username or '–±–µ–∑_username'} (id {user.id}):"
            if message.content_type == types.ContentType.TEXT:
                await bot.send_message(ADMIN_CHAT_ID, f"{header}\n\n{message.text}")
            else:
                await message.forward(ADMIN_CHAT_ID)
        except Exception:
            pass
    await state.finish()
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –û—Ç–∑—ã–≤
@dp.message_handler(commands=["review"])
async def cmd_review(message: types.Message, state: FSMContext):
    if _need_auth(message.from_user.id):
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.", reply_markup=kb_start())
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–∞–∑.", reply_markup=kb_stars())
    await ReviewStates.waiting_stars.set()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("star:"), state=ReviewStates.waiting_stars)
async def cb_stars(callback: types.CallbackQuery, state: FSMContext):
    stars = callback.data.split(":", 1)[1]
    await state.update_data(stars=stars)
    await callback.message.answer("–ë—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚Äî –Ω–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ üí¨üòä\n–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await ReviewStates.waiting_comment.set()
    await callback.answer()

@dp.message_handler(state=ReviewStates.waiting_comment)
async def review_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    stars = data.get("stars") or ""
    uid = message.from_user.id
    order_id = (AUTH.get(uid) or {}).get("order_id")
    comment = (message.text or "").strip()
    full = f"–û—Ü–µ–Ω–∫–∞: {stars}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if stars else comment
    ok = await patch_order_comment(order_id, full)
    await state.finish()
    if ok:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. ü§ç")
    else:
        await message.answer("–ù–µ —Å–º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–∑‚Äë–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏, –Ω–æ —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Startup / Shutdown
async def on_startup(dp: Dispatcher):
    if USE_WEBHOOK:
        if not WEBHOOK_URL:
            log.error("WEBHOOK_URL –ø—É—Å—Ç–æ–π. –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL.")
            raise SystemExit("WEBHOOK_URL –ø—É—Å—Ç–æ–π. –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL.")
        final_url = WEBHOOK_URL.rstrip('/') + WEBHOOK_PATH
        log.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫ –Ω–∞: %s", final_url)
        await bot.set_webhook(final_url)

async def on_shutdown(dp: Dispatcher):
    try:
        await bot.delete_webhook()
    except Exception:
        pass
    log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def main():
    if USE_WEBHOOK:
        start_webhook(
            dispatcher=dp,
            webhook_path=WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host="0.0.0.0",
            port=PORT,
        )
    else:
        from aiogram import executor
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)

if __name__ == "__main__":
    main()
